//@ sourceMappingURL=songlocator-api.map
// Generated by CoffeeScript 1.6.1
var ResolverSet, Server, parseArguments, readConfigSync, v4, _ref;

Server = require('ws').Server;

v4 = require('node-uuid').v4;

ResolverSet = require('songlocator-base').ResolverSet;

_ref = require('songlocator-cli'), readConfigSync = _ref.readConfigSync, parseArguments = _ref.parseArguments;

exports.main = function(port) {
  var config, opts, resolverName, server, _i, _len, _ref1;
  if (port == null) {
    port = 3000;
  }
  opts = parseArguments().opts;
  config = readConfigSync(opts.config) || {};
  _ref1 = opts.resolvers;
  for (_i = 0, _len = _ref1.length; _i < _len; _i++) {
    resolverName = _ref1[_i];
    config[resolverName] = {};
  }
  server = new Server({
    port: port
  });
  server.on('connection', function(sock) {
    var cfg, name, resolver, resolverCls, resolvers, send;
    if (opts.debug) {
      console.log('got new connection');
    }
    send = function(msg) {
      if (opts.debug) {
        console.log('response', {
          qid: msg.qid,
          length: msg.results.length
        });
      }
      return sock.send(JSON.stringify(msg));
    };
    resolvers = (function() {
      var _results;
      _results = [];
      for (name in config) {
        cfg = config[name];
        resolverCls = (require("songlocator-" + name)).Resolver;
        _results.push(new resolverCls(cfg));
      }
      return _results;
    })();
    resolver = new ResolverSet(resolvers);
    resolver.on('results', send);
    return sock.on('message', function(message) {
      var qid, req;
      req = (function() {
        try {
          return JSON.parse(message);
        } catch (e) {
          return void 0;
        }
      })();
      if (!req) {
        return;
      }
      qid = req.qid || v4();
      if (opts.debug) {
        console.log('request', req);
      }
      if (req.method === 'search') {
        return resolver.search(qid, req.query);
      } else if (req.method === 'resolve') {
        return resolver.search(qid, req.title, req.artist, req.album);
      }
    });
  });
  console.log("start listening on localhost:" + port);
  return server;
};
